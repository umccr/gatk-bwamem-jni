buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'com.palantir.git-version' version '3.1.0' //version helper
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.testng:testng:6.9.6'
}

final isRelease = Boolean.getBoolean("release")
version = "1.1.0"
String cpath = "src/main/c"
String libname = "libbwa"

task buildBwaLib(type: Exec){
    workingDir "$cpath"
    outputs.files "$cpath/libbwa*"
    outputs.dir "$cpath/bwa"
    commandLine "make"
    String home = System.properties."java.home"
    //strip the trailing jre
    String corrected = home.endsWith("jre") ?  home.substring(0, home.length() - 4) : home
    environment JAVA_HOME : corrected
    doFirst {  println "using $home -> $corrected as JAVA_HOME" }
}

clean {
    delete "$cpath/$libname*"
    delete fileTree("$cpath") {include "$libname*", "*.o"}
}

build.dependsOn buildBwaLib
test.dependsOn buildBwaLib

processResources {
    dependsOn buildBwaLib
    from cpath
    include "$libname*"
}

test {
    useTestNG()
    testLogging {
        testLogging {
            events "skipped", "failed"
            exceptionFormat = "full"
        }
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
}

/**
 *This specifies what artifacts will be built and uploaded when performing a maven upload.
 */
artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

def assertLibExists(lib){
    if ( ! file(lib).exists()){
        throw new GradleException("Could not perform a maven release because $lib is missing.  You must include both OSX and Linux binaries to release. " +
                "You can run scripts/build_both_dylib_and_so.sh to build both if you are on a Broad Institute connected mac.")
    }
}

/**
 * Upload a release to sonatype.  You must be an authorized uploader and have your sonatype
 * username and password information in your gradle properties file.  See the readme for more info.
 *
 * For releasing to your local maven repo, use gradle install
 */
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/umccr/gatk-bwamem-jni")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
        /*
        mavenJava(MavenPublication) {
            pom {
                name.set('gatk-bwamem-jni')
                packaging = 'jar'
                description.set('java bindings for the bwa-mem assembler')
                url.set('http://github.com/broadinstitute/gatk-bwamem-jni')

                scm {
                    url.set('scm:git@github.com:broadinstitute/gatk-bwamem-jni.git')
                    connection.set('scm:git@github.com:broadinstitute/gatk-bwamem-jni.git')
                    developerConnection.set('scm:git@github.com:broadinstitute/gatk-bwamem-jni.git')
                }

                developers {
                    developer {
                        id.set("gatkdev")
                        name.set("GATK Development Team")
                        email.set("gatk-dev-public@broadinstitute.org")
                    }
                }

                licenses {
                    license {
                        name.set('BSD 3-Clause')
                        url.set('https://github.com/broadinstitute/gatk-bwamem-jni/blob/master/LICENSE.TXT')
                        distribution.set('repo')
                    }
                }
            }
        }
       */
   }
}
